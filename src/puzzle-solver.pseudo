/*
    Genetic Algorithm Software System Pseudocode

    Alexandra Settle (Project Manager)
    Iaroslav â€ŒMedvedyk (Developer)
    Hammed Arowosegbe (Developer)
    Mohammad Salamah (QA) 

    CSK 502 Intelligent Systems

    Output Final Solution on a GUI and Provides Sequence Steps in the Console
*/


/*
    1. Settings Initialisation (Input Parameters)

    PopulationCapacity is a Non Zero Integer with a Maximum Value of 999
    ElitismQuotient is a number from 0 - 100 in percentage
    MutationProbability is a number from 0 - 100 in percentage
    DiversityQuotient is a number from 0 - 100 in percentage
    CrossoverProbability is a number from 0 - 100 in percentage
    TournamentSize = is a Non Zero Integer with a Maximum Value of 100
    MaxInteration is a Non Zero Integer with a Maximum Value of 9999

*/

SET populationCapacity = INPUT ("Population Capacity")
SET elitismQuotient = INPUT ("Elitism Quotient (%)")
SET mutationProbability = INPUT ("Mutation Probability (%)")
SET diversityQuotient = INPUT ("Diversity Quotient (%)")
SET crossoverProbability = INPUT ("Crossover Probability (%)")
SET tournamentSize = INPUT ("Tournament Size")
SET maxInteration = INPUT ("Maximum Interations")

SET inputCharacters = INPUT ( "4 x 4 Matrix Box Character Input" )


/*
    2. Input Normalisation or Labeling

    Here we get matrix input parameters from the input character variable, get the distinct characters and map it to an integer
*/


//Get Distinct Chracters from and Array of Input Variables

FUNCTION getDistinctCharacters (characters)
    SET distinctCharacters = []
    FOR each column in characters
        IF distinctCharacters does not contain column THEN
            ADD column to distinctCharacters
        ENDIF 
    ENDFOR
    RETURN distinctCharacters
ENDFUNCTION


//Map unique input characters to a number for easy manipulation and computation

SET inputMapping = [][]

FUNCTION mapLetterToInteger (character, number)
    inputMapping MAP character to number
ENDFUNCTION


//Run mapping function and Dinstict character function

SET iterator = 1

FOR each letter in getDistinctCharacters(inputCharacters)
    mapLetterToInteger(letter, iterator)
    INCREMENT iterator
ENDFOR

// 3. Definition of Fitness Function
SET penalties = calcRowPenalties() + calcColumnPenalties() + calcSubGridPenalties()


// 4. Definition of Termination Criteria

FUNCTION calculateTerminationCriteria ()
    IF penalties is equal to 0 THEN 
        RETURN true
    ELSE IF currentIteration is greater than or equals maxInteration THEN
        RETURN true
    ELSE 
        RETURN false
    ENDIF
ENDFUNCTION

SET terminationCriteria = calculateTerminationCriteria()


// 5. Generation of Initial Random Population
SET population = []

FOR i = 1 to populationCapacity
    SET chromosome = createRandomChromosome()
    ADD chromosome to population
ENDFOR


// 6. Solution Search Routine

SET solution = []
SET generationSequenceNumber = 1
SET globalBestChromosome = []

WHILE terminationCriteria is equals to false
    SET currentBestChromosome = getFittestChromosome(population)
    IF Fitness in globalBestChromosome is less than Fitness in currentBestChromosome THEN
        SET globalBestChromosome = currentBestChromosome
    ENDIF
    /*
        after this step the population contains only the n fittest chromosomes
    */
    applyElitismOperator(population)
    applyDiversityOperator(population)
    WHILE Size in population < populationCapacity
        SET [parent1, parent2] = doTournament(currentGeneration)
        SET [child1, child2] = applyCrossoverOperator(parent1, parent2)
        applyMutationOperator(child1)
        applyMutationOperator(child2)
        ADD child to population
        ADD child2 to population
    ENDWHILE
    INCREMENT globalBestChromosome
ENDWHILE

IF Fitness in globalBestChromosome is equals 0 THEN
    SET solution = globalBestChromosome
ENDIF


/*
    7. Output Mapping

    Convert Integers to Letters and display it in the GUI

    OUTPUT displays on a 4x4 grid
*/


FUNCTION getCharacter (number)
    IF inputMapping contain number THEN
        RETURN the key value
    ENDIF
ENDFUNCTION


FOR i = 0 in solution
    IF i + 1 /4 is equals to 0 THEN
        moveCursorToNextGrid()
        OUTPUT getCharacter(i in solution)
    ELSE
        OUTPUT getCharacter(i in solution)
    ENDIF
ENDFOR

